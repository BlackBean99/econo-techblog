scalar Void

input User{
    id : ID!
    year : Int!
    post : [Post!]!
    userName : String!
    password : String!
    userEmail : String!
    Role : Role!
    createAt : String!
    modifiedAt : String!
}

input Post{
    Id:ID!
    content:String
    official:Boolean!
    title:String!
    category:[Category!]!
    views: Int!
    like: Int!
    mainCategory: [MainCategory]!
}

input Category{
    Id : ID!
    Post : Post!
    categoryName : [String]!
}

input PostCreateRequestDto{
    content: String
    title: String
    category: String
}

type PostCreateResponseDto{
    user: [User!]!
    content: String
    title: String
    mainCategory: MainCategory
    category: String
    createdDate : String
}

input PostUpdateRequestDto{
    content: String
    title: String
    category: String
}

type PostUpdateResponseDto{
    user: [User!]!
    content: String
    title: String
    category: String
    views: Int
    likes: Int
    createdDate : String
    modifiedDate: String
}

enum MainCategory {
    TECH,CULTURE,TROUBLE_SHOOTING
}

type Post{
    Id:ID!
    content:String
    official:Boolean!
    title:String!
    category:[Category!]!
}

type ConfirmationToken{
    id : ID!
    expirationDate:String!
    expired : Boolean!
    userId : String!
    createAt : String!
    modifiedAt : String!
}

# Test
type User{
    id : ID!
    year : Int!
    post : [Post!]!
    userName : String!
    password : String!
    userEmail : String!
    Role : Role!
    createAt : String!
    modifiedAt : String!
}

enum Role{
    ADMIN
    USER
    GUEST
}

type Category{
    Id : ID!
    user : User!
    categoryName : [String]!
}

#Root Query
type Query{
    #    -----------Post------------------------------
    findAllPosts(mainCategory : MainCategory!): [Post!]!
    findPostByPostId(id : ID!) : Post!

    #    ---------REPLY--------------------
    findReplyByUserName(userName : String!) : Reply!
    findReplyByEmail(userEmail : String!) : Reply!

    #    -----------USER------------------------------
    findUserById(id : ID!) : User!
    findUserByUserName(userName : String!) : [User]!
    findUserByUserEmail(userEmail : String!) : User!

    #    -----------Category-------------------------
    findUserByCategoryName(categoryName : String!) : [User]!
}

#Root Mutation
type Mutation{
    #    -----------Post------------------------------
    createPost(postCreateRequestDto: PostCreateRequestDto): PostCreateResponseDto!
    deletePost(userId : ID):Boolean
    updatePost(postId: ID, postUpdateRequestDto: PostUpdateRequestDto): PostUpdateResponseDto!
    increaseLikePost(postId : ID): Int!
    decreaseLikePost(postId : ID): Int!

    #    Reply--------------
    #    createByReply( : ) : Int!
    deleteByReplyId(replyId : ID!) : Boolean!
    #    updateByReply( : ) : Int!

    #    User--------------------------------
    createUser(userEmail : String!, password : String!, year : Int!, userName : String!) : User!
    updateUser(userEmail : String!, password : String!, year : Int!, userName : String!) : User!
    userLogin(userEmail : String, password : String!) : Boolean!
    deleteUserById(userId: Int!): Boolean!
    updateUserRole(userId : Int!, role : Role!): Role!
    confirmEmail(token : String!) : Void!

    #   Auth-----------------------------------
}

type Reply{
    Id : ID!
    user : User!
    post : Post!
    content : String!
    groupNum : Int!
    depth : Int!
    depth_order : Int!
    created_at : String!
    modified_at : String!
}