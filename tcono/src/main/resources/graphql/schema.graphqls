scalar Void

type Post{
    id:ID!
    userId:Int
    content:String
    title:String!
    official:Boolean!
    views:Int!
    hearts:Int!
    mainCategory: MainCategory
}

enum MainCategory{
    TOTAL
    TECH
    CULTURE
    TROUBLE_SHOOTING
}

type Category{
    Id : ID!
    Post : Post
    categoryName :String
}

#====PostCreateDto====#

input PostCreateRequestDto{
    userId:Int
    content: String
    title: String
    mainCategory:MainCategory
    categorySplitByComma:String
}

type PostCreateResponseDto{
    postId:Int
    userId: Int
    content: String
    title: String
    mainCategory: MainCategory
    categorySplitByComma: String
    createdDate: String
    hearts:Int
    views:Int
}

#====PostUpdateDto======#
input PostUpdateRequestDto{
    content: String
    title: String
    categorySplitByComma: String
}

type PostUpdateResponseDto{
    userId: Int
    content: String
    title: String
    category: String
    views: Int
    likes: Int
    createdDate : String
    modifiedDate: String
}

#====HeartRequestDto====#

input HeartRequestDto {
    postId : Int
    userId:Int
    isHeart:Boolean
}

# 타입 시스템 정의
schema {
    query: Query
    mutation: Mutation,
}

#Root Query
type Query{
    #    -----------Post------------------------f------
    findAllPosts(mainCategory : MainCategory, page : Int): [Post!]!
    findPostByPostId(id : Int) : Post!
    search(keyword : String , page : Int) : [Post]!
    #    ---------Comment--------------------
}

#Root Mutation
type Mutation{
    #    -----------Post------------------------------
    createPost(postCreateRequestDto: PostCreateRequestDto): PostCreateResponseDto!,
#    updatePost(postUpdateRequestDto: PostUpdateRequestDto): PostUpdateResponseDto!,
    deletePost(postId : ID):Boolean,
    findOfficial: [Post!]!,
    #
    #       -----------Heart------------------------------
    updateHeartState(heartRequestDto:HeartRequestDto): Int!
    #
    #    #    -----------Comment------------------------------
    #
}